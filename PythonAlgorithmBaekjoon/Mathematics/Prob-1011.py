def count(D):
  working = 0
  step = 1
  while D > 0:
    D -= step
    working += 1
    if working % 2 == 0:
      step += 1
  return working


T = int(input())
for _ in range(T):
    x, y = map(int, input().split())
    distance = y - x
    print(count(distance))

# 이 문제를 풀기 위해서 규칙을 찾는 것이 중요하다.
# 먼저 이동거리를 위해 필요한 작동 횟수를 수기로 나열하다보면 규칙을 찾을 수 있다.
# 이동거리: 1             작동 횟수: 1
# 이동거리: 2             작동 횟수: 2
# 이동거리: 3             작동 횟수: 3
# 이동거리: 4             작동 횟수: 3
# 이동거리: 5             작동 횟수: 4
# 이동거리: 6             작동 횟수: 4
# 이동거리: 7             작동 횟수: 5
# 이동거리: 8             작동 횟수: 5
# 이동거리: 9             작동 횟수: 5
# 이동거리: 10            작동 횟수: 6
# 이동거리: 11            작동 횟수: 6
# 이동거리: 12            작동 횟수: 6
# 이동거리: 13            작동 횟수: 7
# 이동거리: 14            작동 횟수: 7
# 이동거리: 15            작동 횟수: 7
# 이동거리: 16            작동 횟수: 7
# 이동거리: 17            작동 횟수: 8
# 작동 횟수가 늘어나는 이동 거리는
# 1 2 3 5 7 10 13 17 ... 이다.
# 작동 횟수와 이동거리 사이의 규칙은
# 작동거리가 2회 늘어나면 움직일 수 있는 거리는 1 늘어나게 된다.
# e.g. 1 -> 2 -> 3 까지 작동거리가 2회 늘어나고 3 -> 5 되면서 거리도 1 늘어나게된다.
